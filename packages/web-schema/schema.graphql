enum RuleType {
  ATOMIC
  COMPOSITE
}

type Rule {
  id: ID!
  type: RuleType!
  description: String!
}

type Source {
  id: ID!
  content: String!
  title: String
  url: String
}

type Location {
  startLine: Int!
  startColumn: Int!
  endLine: Int!
  endColumn: Int!
}

type HTMLPointer {
  id: ID!
  xpath: String!
  source: Source
  location: Location
  screenshot: String
}

type CSSPointer {
  id: ID!
  xpath: String!
  propertyName: String!
  source: Source
  location: Location
  screenshot: String
}

union Pointer = HTMLPointer | CSSPointer;

enum Outcome {
  FAIL
  PASSED
  INAPPLICABLE
}

type Report {
  id: ID!
  outcome: Outcome!
  rule: Rule!
  target: String
  message: String
  pointers: [Pointer!]!
}

type Score {
  error: Int!
  warn: Int!
  ok: Int!
}

enum DiagnosisStatus {
  STARTED
  PROCESSING
  DONE
  FAILED
}

type Diagnosis {
  id: ID!
  status: DiagnosisStatus!
  screenshot: String!
  reports: [Report!]!
  doneCount: Int!
  totalCount: Int!
  createdAt: Date!
  updatedAt: Date!
}

type Query {
  diagnosis(id: ID!): Diagnosis!
}

type Mutation {
  createDiagnosis(url: String!): Diagnosis!
  deleteDiagnosis(id: ID!): ID!
}

type Subscription {
  diagnosis(id: ID!): Diagnosis!
}

schema {
  query: Query
  mutation: Mutation
}
